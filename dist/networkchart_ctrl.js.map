{"version":3,"sources":["../src/networkchart_ctrl.js"],"names":["MetricsPanelCtrl","_","rendering","NetworkChartCtrl","$scope","$injector","$rootScope","panelDefaults","networkType","legend","show","values","links","datasource","maxDataPoints","interval","targets","cacheTimeout","nullPointMode","legendType","aliasColors","format","valueName","strokeWidth","fontSize","combine","threshold","label","defaults","panel","events","on","onDataReceived","bind","onDataError","onInitEditMode","addEditorTab","columnMap","columns","render","dataList","data","_error","type","rows","scope","elem","attrs","ctrl","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,sB,kBAAAA,gB;;AACDC,O;;AACAC,e;;;;;;;;;;;;;;;;;;;;;kCAEMC,gB;;;AAEX,kCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2C;AAAA;;AAAA,0IACnCF,MADmC,EAC3BC,SAD2B;;AAEzC,gBAAKC,UAAL,GAAkBA,UAAlB;;AAEA,cAAIC,gBAAgB;AAClBC,yBAAa,SADK;AAElBC,oBAAQ;AACNC,oBAAM,IADA,EACM;AACZC,sBAAQ;AAFF,aAFU;AAMlBC,mBAAO,EANW;AAOlBC,wBAAY,IAPM;AAQlBC,2BAAe,CARG;AASlBC,sBAAU,IATQ;AAUlBC,qBAAS,CAAC,EAAD,CAVS;AAWlBC,0BAAc,IAXI;AAYlBC,2BAAe,WAZG;AAalBC,wBAAY,aAbM;AAclBC,yBAAa,EAdK;AAelBC,oBAAQ,OAfU;AAgBlBC,uBAAW,SAhBO;AAiBlBC,yBAAa,CAjBK;AAkBlBC,sBAAU,KAlBQ;AAmBnBC,qBAAS;AACPC,yBAAW,GADJ;AAEPC,qBAAO;AAFA;AAnBU,WAApB;;AAyBA1B,YAAE2B,QAAF,CAAW,MAAKC,KAAhB,EAAuBtB,aAAvB;AACAN,YAAE2B,QAAF,CAAW,MAAKC,KAAL,CAAWpB,MAAtB,EAA8BF,cAAcE,MAA5C;;AAEA;AACA,gBAAKqB,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKC,cAAL,CAAoBC,IAApB,OAAhC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAKG,WAAL,CAAiBD,IAAjB,OAA7B;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKC,cAAL,CAAoBC,IAApB,OAArC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKI,cAAL,CAAoBF,IAApB,OAAjC;AApCyC;AAqC1C;;;;2CAEgB;AACf,iBAAKG,YAAL,CAAkB,SAAlB,EAA6B,uDAA7B,EAAsF,CAAtF;AACA;AACD;;;wCAGa;AACZ,iBAAKC,SAAL,GAAiB,EAAjB;AACA,iBAAKC,OAAL,GAAe,EAAf;AACA,iBAAKC,MAAL;AACD;;;yCAScC,Q,EAAU;AACvB,gBAAIC,OAAOD,SAAS,CAAT,CAAX;;AAEA,gBAAG,CAACC,IAAJ,EACA;AACE,mBAAKC,MAAL,GAAc,iBAAd;AACA,qBAAO,KAAKH,MAAL,EAAP;AACD;;AAED,gBAAGE,KAAKE,IAAL,KAAc,OAAjB,EACA;AACE,mBAAKD,MAAL,GAAc,wCAAd;AACA,qBAAO,KAAKH,MAAL,EAAP;AACD;;AAED,iBAAKG,MAAL,GAAc,IAAd;;AAEA,iBAAKL,SAAL,GAAiBI,KAAKJ,SAAtB;AACA,iBAAKC,OAAL,GAAeG,KAAKH,OAApB;AACA,iBAAKG,IAAL,GAAYA,KAAKG,IAAjB,CAnBuB,CAmBA;AACvB,iBAAKL,MAAL,CAAY,KAAKE,IAAjB;AACD;;;+BAGII,K,EAAOC,I,EAAMC,K,EAAOC,I,EAAM;AAC7B9C,sBAAU2C,KAAV,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,IAA9B;AACD;;;;QAtFmChD,gB;;;;AAyFtCG,uBAAiB8C,WAAjB,GAA+B,aAA/B","file":"networkchart_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport rendering from './rendering';\n\nexport class NetworkChartCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n\n    var panelDefaults = {\n      networkType: 'network',\n      legend: {\n        show: true, // disable/enable legend\n        values: true\n      },\n      links: [],\n      datasource: null,\n      maxDataPoints: 3,\n      interval: null,\n      targets: [{}],\n      cacheTimeout: null,\n      nullPointMode: 'connected',\n      legendType: 'Under graph',\n      aliasColors: {},\n      format: 'short',\n      valueName: 'current',\n      strokeWidth: 1,\n      fontSize: '80%',\n  \t  combine: {\n  \t    threshold: 0.0,\n  \t    label: 'Others'\n  \t  }\n    };\n\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.legend, panelDefaults.legend);\n\n    //this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-networkchart-panel/editor.html', 2);\n    //this.unitFormats = kbn.getUnitFormats();\n  }\n\n\n  onDataError() {\n    this.columnMap = [];\n    this.columns = [];\n    this.render();\n  }\n\n\n  /*\n  onRender() {\n    this.data = this.parsecolumnMap(this.columnMap);\n  }\n  */\n\n  onDataReceived(dataList) {\n    let data = dataList[0];\n\n    if(!data)\n    {\n      this._error = \"No data points.\";\n      return this.render();\n    }\n\n    if(data.type !== \"table\")\n    {\n      this._error = \"Should be table fetch. Use terms only.\";\n      return this.render();\n    }\n\n    this._error = null;\n\n    this.columnMap = data.columnMap; \n    this.columns = data.columns; \n    this.data = data.rows; //this.parsecolumnMap(this.columnMap);\n    this.render(this.data);\n  }\n\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n}\n\nNetworkChartCtrl.templateUrl = 'module.html';\n"]}