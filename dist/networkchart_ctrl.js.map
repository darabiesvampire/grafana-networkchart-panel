{"version":3,"sources":["../src/networkchart_ctrl.js"],"names":["MetricsPanelCtrl","_","rendering","NetworkChartCtrl","$scope","$injector","$rootScope","$interpolate","$sanitize","templateSrv","panelDefaults","color_scale","first_color_selector","first_color_regexp","second_color_selector","second_color_regexp","combine_active","combine_method","dynamic_radius","node_radius","square_side_length","dynamic_thickness","link_thickness","link_distance","hide_internal_relationships","remove_noise","noise","nodes_remove_noise","nodes_noise","first_filter_minumum_number_of_links","second_filter_minumum_number_of_links","defaults","panel","events","on","onDataReceived","bind","onDataError","onInitEditMode","addEditorTab","columnMap","columns","data","render","values","selectors","map","splice","concat","length","text","dataList","_error","type","first_term_tooltip","combine_to_show","second_term_tooltip","rows","count","pathColumn","issueIdColumn","authorColumn","intervalColumn","getIndex","columnList","findIndex","getNthIndex","word","substring","index","split","join","groupBy","xs","key","reduce","rv","x","push","groupByArray","dataToBeGrouped","groupKey","groupObjectdata","Object","keys","item","connections","filePathIndex","issueIdIndex","fileGroup","replaceWithText","scopedVars","shouldGroupFiles","isFileGroupInt","isInt","fileGroupIndex","parseInt","filter","match","fileInclusionFilter","shouldApplyFileInclusion","regexChecker","RegExp","test","fileRegexFilter","shouldFilterFiles","fileDerivativeFilter","shouldApplyDerivativeFilter","minFileDerivative","shouldApplyMinDerivative","derivativeLevel","minDerivativeLevel","tempRows","originalPath","changedParam","assign","issueGroupedArray","acceptedIssues","i","tempIssueId","v","set","metricFilterEdge","trim","shouldFilterMetricEdge","metricFilterIssue","shouldFilterMetricIssue","minFiles","shouldApplyMinFiles","minIssues","shouldApplyMinIssues","scope","elem","attrs","ctrl","prev_highlight_text","highlight_text","value","isNaN","parseFloat","templateUrl"],"mappings":"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","file":"networkchart_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport rendering from './rendering';\n\nexport class NetworkChartCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope, $interpolate, $sanitize, templateSrv) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n    this.$interpolate = $interpolate;\n    this.$sanitize = $sanitize;\n    this.templateSrv = templateSrv;\n\n    var panelDefaults = {\n      color_scale : \"schemeCategory10\",\n      first_color_selector : \"index\",\n      first_color_regexp : \"(.+?)\\\\/\",\n\n      second_color_selector: \"index\",\n      second_color_regexp : \"(.+?)\\\\/\",\n      \n      combine_active : false,\n      combine_method : \"min\",\n\n      dynamic_radius : false,\n      node_radius : 5,\n      square_side_length: 10,\n\n      dynamic_thickness : true,\n      link_thickness : 1,\n\n      link_distance: 20,\n\n      hide_internal_relationships: false,\n      \n      remove_noise : false,\n      noise : 20,\n\n\n      nodes_remove_noise : false,\n      nodes_noise : 100,\n\n      first_filter_minumum_number_of_links : 0,\n      second_filter_minumum_number_of_links: 0\n\n    };\n\n    _.defaults(this.panel, panelDefaults);\n\n    //this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-networkchart-panel/editor.html', 2);\n  }\n\n\n  onDataError() {\n    this.columnMap = [];\n    this.columns = [];\n    this.data = [];\n    this.render();\n  }\n\n\n  colorSelectOptions(){\n    var values = [\"index\",\"regular expression\"];\n\n    if(!this.columns)\n      return[];\n\n    var selectors = _.map(this.columns,\"text\");\n\n    selectors.splice(-1);\n    \n    return values.concat(selectors);\n  }\n\n  combineOptions(){\n    if(!this.columns || this.columns.length < 2)\n      return[];\n\n    return [\n      this.columns[0].text ,\n      this.columns[1].text ,\n      ];\n  }\n\n\n  /*\n  onRender() {\n    this.data = this.parsecolumnMap(this.columnMap);\n  }\n  */\n\n  onDataReceived(dataList) {\n    let data = dataList[0];\n\n    if(!data)\n    {\n      this._error = \"No data points.\";\n      return this.render();\n    }\n\n    if(data.type !== \"table\")\n    {\n      this._error = \"Should be table fetch. Use terms only.\";\n      return this.render();\n    }\n\n    this._error = null;\n\n    this.columnMap = data.columnMap; \n    this.columns = data.columns; \n\n    if(! this.panel.first_term_tooltip &&  this.columns[0])\n    {\n     this.panel.first_term_tooltip=  \"{{\" + this.columns[0].text + \"}}\";\n    }\n\n\n    if(! this.panel.combine_to_show &&  this.columns[0])\n    {\n     this.panel.combine_to_show=  this.columns[0].text;\n    }\n\n\n    if(! this.panel.second_term_tooltip &&  this.columns[1])\n    {\n     this.panel.second_term_tooltip=  \"{{\" + this.columns[1].text + \"}}\";\n    }\n    let rows = data.rows;\n    if(this.columns && this.columns.length >= 2) {\n      let pathColumn = '@path';\n      let issueIdColumn = '@issueId';\n      let authorColumn = '@author';\n      let intervalColumn = '$interval';\n\n\n      let getIndex = (text, columnList = this.columns) => {\n        return _.findIndex(columnList, {text: text});\n      };\n\n      let getNthIndex = (word, substring, index) => {\n        return word.split(substring, index).join(substring).length;\n      };\n\n      let groupBy = (xs, key) => {\n        return xs.reduce((rv, x) => {\n          (rv[x[key]] = rv[x[key]] || []).push(x);\n          return rv;\n        }, {});\n      };\n\n\n      let groupByArray = (dataToBeGrouped, groupKey) => {\n        let groupObjectdata = groupBy(dataToBeGrouped, groupKey);\n        return Object.keys(groupObjectdata)\n          .map(item => {\n            return ({item, connections: groupObjectdata[item]});\n          });\n      };\n\n\n      let filePathIndex = getIndex(pathColumn);\n      //let valueIndex = columnList.length - 1;\n      let issueIdIndex = getIndex(issueIdColumn);\n      if (issueIdIndex === -1) {\n        issueIdIndex = getIndex(authorColumn);\n        if (issueIdIndex === -1) {\n          issueIdIndex = getIndex(intervalColumn);\n        }\n      }\n\n      let fileGroup = this.templateSrv.replaceWithText('$file_group', this.panel.scopedVars);\n\n      let shouldGroupFiles = fileGroup !== '' && fileGroup !== '-' && fileGroup !== '$file_group';\n      if (shouldGroupFiles) {\n        let isFileGroupInt = this.isInt(fileGroup);\n        if (isFileGroupInt) {\n          let fileGroupIndex = parseInt(fileGroup, 10);\n          rows = rows.filter(item => (item[filePathIndex].match(/\\//g) || []).length === fileGroupIndex);\n        } else {\n          rows = rows.filter(item => item[filePathIndex].match(fileGroup));\n        }\n      }\n\n      let fileInclusionFilter = this.templateSrv.replaceWithText('$file_include', this.panel.scopedVars);\n      let shouldApplyFileInclusion = fileInclusionFilter !== \"\" && fileInclusionFilter !== '-' && fileInclusionFilter !== '$file_include';\n      if (shouldApplyFileInclusion) {\n        let regexChecker = new RegExp(fileInclusionFilter);\n        rows = rows.filter(item => regexChecker.test(item[filePathIndex]));\n      }\n\n\n      let fileRegexFilter = this.templateSrv.replaceWithText('$file_exclude', this.panel.scopedVars);\n      let shouldFilterFiles = fileRegexFilter !== \"\" && fileRegexFilter !== '-' && fileRegexFilter !== '$file_exclude';\n      if (shouldFilterFiles) {\n        let regexChecker = new RegExp(fileRegexFilter);\n        rows = rows.filter(item => !regexChecker.test(item[filePathIndex]));\n      }\n\n      let fileDerivativeFilter = this.templateSrv.replaceWithText('$derivative_level');\n      let shouldApplyDerivativeFilter = fileDerivativeFilter !== \"\" && fileDerivativeFilter !== '-' && fileDerivativeFilter !== '$derivative_level';\n\n      let minFileDerivative = this.templateSrv.replaceWithText('$min_derivative_level');\n      let shouldApplyMinDerivative = minFileDerivative !== \"\" && minFileDerivative !== '-' && minFileDerivative !== '$min_derivative_level';\n\n      if (shouldApplyDerivativeFilter && shouldApplyMinDerivative && this.isInt(minFileDerivative) && this.isInt(fileDerivativeFilter)) {\n        let derivativeLevel = parseInt(fileDerivativeFilter, 10);\n        let minDerivativeLevel = parseInt(minFileDerivative, 10);\n        let tempRows = rows.map(x => {\n            let originalPath = x[filePathIndex];\n            let changedParam = {};\n            changedParam[filePathIndex] = x[filePathIndex].substring(0, getNthIndex(originalPath, '/', derivativeLevel))\n            return Object.assign({}, x, changedParam);\n          });\n        let issueGroupedArray = groupByArray(tempRows, issueIdIndex);\n        let acceptedIssues = {};\n        for (let i = 0; i < issueGroupedArray.length; i++) {\n          let tempIssueId = issueGroupedArray[i].item;\n          var count = issueGroupedArray[i].connections.reduce(function(values, v) {\n\n            if (!values.set[v[filePathIndex]]) {\n              values.set[v[filePathIndex]] = 1;\n              values.count++;\n            }\n            return values;\n          }, { set: {}, count: 0 }).count;\n          if (count >= minDerivativeLevel) {\n            acceptedIssues[tempIssueId] = true;\n          }\n        }\n\n        rows = rows.filter(item => acceptedIssues[item[issueIdIndex]]);\n      }\n\n      let metricFilterEdge = this.templateSrv.replaceWithText('$metric_range_edge', this.panel.scopedVars);\n      if (metricFilterEdge) {\n        metricFilterEdge = metricFilterEdge.trim();\n      }\n      let shouldFilterMetricEdge = metricFilterEdge !== \"\" && metricFilterEdge !== '-' && metricFilterEdge !== '$metric_range_edge';\n      if (shouldFilterMetricEdge) {\n        this.panel.noise = metricFilterEdge;\n      }\n      else {\n        this.panel.noise = 50;\n      }\n\n      let metricFilterIssue = this.templateSrv.replaceWithText('$metric_range_issue', this.panel.scopedVars);\n      if (metricFilterIssue) {\n        metricFilterIssue = metricFilterIssue.trim();\n      }\n      let shouldFilterMetricIssue = metricFilterIssue !== \"\" && metricFilterIssue !== '-' && metricFilterIssue !== '$metric_range_issue';\n      if (shouldFilterMetricIssue) {\n        this.panel.nodes_noise = metricFilterIssue;\n      }\n      else {\n        this.panel.nodes_noise = 50;\n      }\n\n      let minFiles = this.templateSrv.replaceWithText('$min_files', this.panel.scopedVars);\n      if (minFiles) {\n         minFiles = minFiles.trim();\n      }\n      let shouldApplyMinFiles = minFiles !== \"\" && minFiles !== '-' && minFiles !== '$min_files';\n      if (shouldApplyMinFiles) {\n        this.panel.first_filter_minumum_number_of_links = minFiles;\n      }\n      else {\n        this.panel.first_filter_minumum_number_of_links = 0;\n      }\n\n      let minIssues = this.templateSrv.replaceWithText('$min_issues', this.panel.scopedVars);\n      if (minIssues) {\n        minIssues = minIssues.trim();\n      }\n      let shouldApplyMinIssues = minIssues !== \"\" && minIssues !== '-' && minIssues !== '$min_issues';\n      if (shouldApplyMinIssues) {\n        this.panel.second_filter_minumum_number_of_links = minIssues;\n      }\n      else {\n        this.panel.second_filter_minumum_number_of_links = 0;\n      }\n\n    }\n\n    this.data = rows; //this.parsecolumnMap(this.columnMap);\n    this.render(this.data);\n  }\n\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n\n\n  highlight(){\n    this.render(); \n    this.prev_highlight_text =  this.highlight_text;\n  }\n\n  isInt(value) {\n    // tslint:disable-next-line:no-bitwise\n    return !isNaN(value) && (function (x) { return (x | 0) === x; })(parseFloat(value));\n  }\n}\n\nNetworkChartCtrl.templateUrl = 'module.html';\n"]}