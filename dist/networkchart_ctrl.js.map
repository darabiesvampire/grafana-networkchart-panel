{"version":3,"sources":["../src/networkchart_ctrl.js"],"names":["MetricsPanelCtrl","_","rendering","NetworkChartCtrl","$scope","$injector","$rootScope","panelDefaults","color_scale","first_color_selector","first_color_regexp","second_color_selector","second_color_regexp","combine_active","combine_method","dynamic_radius","node_radius","dynamic_thickness","link_thickness","remove_noise","noise","defaults","panel","events","on","onDataReceived","bind","onDataError","onInitEditMode","addEditorTab","columnMap","columns","data","render","values","selectors","map","splice","concat","dataList","_error","type","rows","scope","elem","attrs","ctrl","prev_highlight_text","highlight_text","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,sB,kBAAAA,gB;;AACDC,O;;AACAC,e;;;;;;;;;;;;;;;;;;;;;kCAEMC,gB;;;AAEX,kCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2C;AAAA;;AAAA,0IACnCF,MADmC,EAC3BC,SAD2B;;AAEzC,gBAAKC,UAAL,GAAkBA,UAAlB;;AAEA,cAAIC,gBAAgB;AAClBC,yBAAc,kBADI;AAElBC,kCAAuB,OAFL;AAGlBC,gCAAqB,UAHH;;AAKlBC,mCAAuB,OALL;AAMlBC,iCAAsB,UANJ;;AAQlBC,4BAAiB,KARC;AASlBC,4BAAiB,KATC;;AAWlBC,4BAAiB,KAXC;AAYlBC,yBAAc,CAZI;;AAclBC,+BAAoB,IAdF;AAelBC,4BAAiB,CAfC;;AAiBlBC,0BAAe,KAjBG;AAkBlBC,mBAAQ;;AAlBU,WAApB;;AAuBAnB,YAAEoB,QAAF,CAAW,MAAKC,KAAhB,EAAuBf,aAAvB;;AAEA;AACA,gBAAKgB,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKC,cAAL,CAAoBC,IAApB,OAAhC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAKG,WAAL,CAAiBD,IAAjB,OAA7B;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKC,cAAL,CAAoBC,IAApB,OAArC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKI,cAAL,CAAoBF,IAApB,OAAjC;AAjCyC;AAkC1C;;;;2CAEgB;AACf,iBAAKG,YAAL,CAAkB,SAAlB,EAA6B,uDAA7B,EAAsF,CAAtF;AACD;;;wCAGa;AACZ,iBAAKC,SAAL,GAAiB,EAAjB;AACA,iBAAKC,OAAL,GAAe,EAAf;AACA,iBAAKC,IAAL,GAAY,EAAZ;AACA,iBAAKC,MAAL;AACD;;;+CAGmB;AAClB,gBAAIC,SAAS,CAAC,OAAD,EAAS,oBAAT,CAAb;;AAEA,gBAAG,CAAC,KAAKH,OAAT,EACE,OAAM,EAAN;;AAEF,gBAAII,YAAYlC,EAAEmC,GAAF,CAAM,KAAKL,OAAX,EAAmB,MAAnB,CAAhB;;AAEAI,sBAAUE,MAAV,CAAiB,CAAC,CAAlB;;AAEA,mBAAOH,OAAOI,MAAP,CAAcH,SAAd,CAAP;AACD;;;yCAScI,Q,EAAU;AACvB,gBAAIP,OAAOO,SAAS,CAAT,CAAX;;AAEA,gBAAG,CAACP,IAAJ,EACA;AACE,mBAAKQ,MAAL,GAAc,iBAAd;AACA,qBAAO,KAAKP,MAAL,EAAP;AACD;;AAED,gBAAGD,KAAKS,IAAL,KAAc,OAAjB,EACA;AACE,mBAAKD,MAAL,GAAc,wCAAd;AACA,qBAAO,KAAKP,MAAL,EAAP;AACD;;AAED,iBAAKO,MAAL,GAAc,IAAd;;AAEA,iBAAKV,SAAL,GAAiBE,KAAKF,SAAtB;AACA,iBAAKC,OAAL,GAAeC,KAAKD,OAApB;AACA,iBAAKC,IAAL,GAAYA,KAAKU,IAAjB,CAnBuB,CAmBA;AACvB,iBAAKT,MAAL,CAAY,KAAKD,IAAjB;AACD;;;+BAGIW,K,EAAOC,I,EAAMC,K,EAAOC,I,EAAM;AAC7B5C,sBAAUyC,KAAV,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,IAA9B;AACD;;;sCAGU;AACT,iBAAKb,MAAL;AACA,iBAAKc,mBAAL,GAA4B,KAAKC,cAAjC;AACD;;;;QAvGmChD,gB;;;;AA0GtCG,uBAAiB8C,WAAjB,GAA+B,aAA/B","file":"networkchart_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport rendering from './rendering';\n\nexport class NetworkChartCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n\n    var panelDefaults = {\n      color_scale : \"schemeCategory10\",\n      first_color_selector : \"index\",\n      first_color_regexp : \"(.+?)\\\\/\",\n\n      second_color_selector: \"index\",\n      second_color_regexp : \"(.+?)\\\\/\",\n      \n      combine_active : false,\n      combine_method : \"min\",\n\n      dynamic_radius : false,\n      node_radius : 5,\n\n      dynamic_thickness : true,\n      link_thickness : 1,\n\n      remove_noise : false,\n      noise : 10\n      \n\n    };\n\n    _.defaults(this.panel, panelDefaults);\n\n    //this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-networkchart-panel/editor.html', 2);\n  }\n\n\n  onDataError() {\n    this.columnMap = [];\n    this.columns = [];\n    this.data = [];\n    this.render();\n  }\n\n\n  colorSelectOptions(){\n    var values = [\"index\",\"regular expression\"];\n\n    if(!this.columns)\n      return[];\n\n    var selectors = _.map(this.columns,\"text\");\n\n    selectors.splice(-1);\n    \n    return values.concat(selectors);\n  }\n\n\n  /*\n  onRender() {\n    this.data = this.parsecolumnMap(this.columnMap);\n  }\n  */\n\n  onDataReceived(dataList) {\n    let data = dataList[0];\n\n    if(!data)\n    {\n      this._error = \"No data points.\";\n      return this.render();\n    }\n\n    if(data.type !== \"table\")\n    {\n      this._error = \"Should be table fetch. Use terms only.\";\n      return this.render();\n    }\n\n    this._error = null;\n\n    this.columnMap = data.columnMap; \n    this.columns = data.columns; \n    this.data = data.rows; //this.parsecolumnMap(this.columnMap);\n    this.render(this.data);\n  }\n\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n\n\n  highlight(){\n    this.render(); \n    this.prev_highlight_text =  this.highlight_text;\n  }\n}\n\nNetworkChartCtrl.templateUrl = 'module.html';\n"]}