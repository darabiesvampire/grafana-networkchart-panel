{"version":3,"sources":["../src/networkchart_ctrl.js"],"names":["MetricsPanelCtrl","_","rendering","NetworkChartCtrl","$scope","$injector","$rootScope","$interpolate","$sanitize","panelDefaults","color_scale","first_color_selector","first_color_regexp","second_color_selector","second_color_regexp","combine_active","combine_method","dynamic_radius","node_radius","square_side_length","dynamic_thickness","link_thickness","link_distance","hide_internal_relationships","remove_noise","noise","nodes_remove_noise","nodes_noise","defaults","panel","events","on","onDataReceived","bind","onDataError","onInitEditMode","addEditorTab","columnMap","columns","data","render","values","selectors","map","splice","concat","length","text","dataList","_error","type","first_term_tooltip","combine_to_show","second_term_tooltip","rows","scope","elem","attrs","ctrl","prev_highlight_text","highlight_text","templateUrl"],"mappings":"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","file":"networkchart_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport rendering from './rendering';\n\nexport class NetworkChartCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope, $interpolate, $sanitize) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n    this.$interpolate = $interpolate;\n    this.$sanitize = $sanitize;\n\n    var panelDefaults = {\n      color_scale : \"schemeCategory10\",\n      first_color_selector : \"index\",\n      first_color_regexp : \"(.+?)\\\\/\",\n\n      second_color_selector: \"index\",\n      second_color_regexp : \"(.+?)\\\\/\",\n      \n      combine_active : false,\n      combine_method : \"min\",\n\n      dynamic_radius : false,\n      node_radius : 5,\n      square_side_length: 10,\n\n      dynamic_thickness : true,\n      link_thickness : 1,\n\n      link_distance: 20,\n\n      hide_internal_relationships: false,\n      \n      remove_noise : false,\n      noise : 100,\n\n\n      nodes_remove_noise : false,\n      nodes_noise : 1000\n\n    };\n\n    _.defaults(this.panel, panelDefaults);\n\n    //this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-networkchart-panel/editor.html', 2);\n  }\n\n\n  onDataError() {\n    this.columnMap = [];\n    this.columns = [];\n    this.data = [];\n    this.render();\n  }\n\n\n  colorSelectOptions(){\n    var values = [\"index\",\"regular expression\"];\n\n    if(!this.columns)\n      return[];\n\n    var selectors = _.map(this.columns,\"text\");\n\n    selectors.splice(-1);\n    \n    return values.concat(selectors);\n  }\n\n  combineOptions(){\n    if(!this.columns || this.columns.length < 2)\n      return[];\n\n    return [\n      this.columns[0].text ,\n      this.columns[1].text ,\n      ];\n  }\n\n\n  /*\n  onRender() {\n    this.data = this.parsecolumnMap(this.columnMap);\n  }\n  */\n\n  onDataReceived(dataList) {\n    let data = dataList[0];\n\n    if(!data)\n    {\n      this._error = \"No data points.\";\n      return this.render();\n    }\n\n    if(data.type !== \"table\")\n    {\n      this._error = \"Should be table fetch. Use terms only.\";\n      return this.render();\n    }\n\n    this._error = null;\n\n    this.columnMap = data.columnMap; \n    this.columns = data.columns; \n\n    if(! this.panel.first_term_tooltip &&  this.columns[0])\n    {\n     this.panel.first_term_tooltip=  \"{{\" + this.columns[0].text + \"}}\";\n    }\n\n\n    if(! this.panel.combine_to_show &&  this.columns[0])\n    {\n     this.panel.combine_to_show=  this.columns[0].text;\n    }\n\n\n    if(! this.panel.second_term_tooltip &&  this.columns[1])\n    {\n     this.panel.second_term_tooltip=  \"{{\" + this.columns[1].text + \"}}\";\n    }\n\n    this.data = data.rows; //this.parsecolumnMap(this.columnMap);\n    this.render(this.data);\n  }\n\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n\n\n  highlight(){\n    this.render(); \n    this.prev_highlight_text =  this.highlight_text;\n  }\n}\n\nNetworkChartCtrl.templateUrl = 'module.html';\n"]}